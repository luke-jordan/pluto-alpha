version: 2
jobs:
  build:
    docker:
      - image: circleci/node:10
        environment:

      # Postgres image for testing
      # - image: circleci/postgres:9.6.5-alpine-ram
      #   environment:
      #     POSTGRES_USER: postgres
      #     POSTGRES_DB: postgres
      #     POSTGRES_PASSWORD: postgres

    working_directory: ~/app

    steps:
      - checkout

      - run:
          name: Search for commited credentials
          command: |
            cd $HOME/app
            git clone https://github.com/awslabs/git-secrets
            cd git-secrets && sudo make install
            cd $HOME/app
            git secrets --install
            git secrets --register-aws
            git secrets --scan -r

      - run:
          name: Generate modules package.json to use for cache, install, etc
          command: |
            mv .circleci/package-merge.js ./
            node package-merge.js modules
            npm i --package-lock-only && npm audit fix --package-lock-only

      # _Only_ use exact key matching here, else subsequent script will skip install spuriously
      - restore_cache:
          keys:
          - module_dependencies-{{ checksum "./package-lock.json" }}

      # Note: we get consolidated audit fix here; and audit fix will install all the modules necessary 
      - run:
          name: Install dependencies for our modules
          command: |
            mv .circleci/install_module_dependencies.sh ./
            /bin/sh install_module_dependencies.sh

      - save_cache:
          key: module_dependencies-{{ checksum "./package-lock.json" }}
          paths:
            - node_modules

      - run:
          name: Lint and testing modules
          command: |
            # Util is trivial so we skip for now
            echo "Linting and testing modules"
            cd $HOME/app
            mv .circleci/execute_test_lint.sh ./
            /bin/sh execute_test_lint.sh modules/rds-common
            /bin/sh execute_test_lint.sh modules/dynamo-common
            /bin/sh execute_test_lint.sh modules/publish-common      

      # Note: we do this _after_ the cache steps, so the cache includes all the modules needed for tests
      - run:
          name: Prune module dependencies then copy into modules themselves
          command: |
            cd $HOME/app
            npm prune --production
            echo "Prune complete, remove old symlinks"
            rm modules/rds-common/node_modules && rm modules/dynamo-common/node_modules && rm modules/publish-common/node_modules
            echo "Now copy pruned dependencies into modules"
            cp -r node_modules modules/rds-common/; echo "."
            cp -r node_modules modules/dynamo-common/; echo "."
            cp -r node_modules modules/publish-common/; echo "."
            cp -r node_modules modules/ops-util-common/; echo "."

      - run:
          name: Shift module dependencies and generate functions' package-lock.json 
          command: |
            mv package-lock.json modules_package.json
            mv node_modules module_dependencies

            node package-merge.js functions

            npm i --package-lock-only && npm audit fix --package-lock-only
            
      # As above, only use exact matching here, else subsequent will be incorrect
      - restore_cache:
          keys:
          - function_dependencies-{{ checksum "./package-lock.json" }}-{{ checksum "./modules_package.json" }}

      - run:
          name: Install dependencies for our functions, if not stored
          command: |
            cd $HOME/app
            mv .circleci/install_function_dependencies.sh ./
            /bin/sh install_function_dependencies.sh

      - save_cache:
          key: function_dependencies-{{ checksum "./package-lock.json" }}-{{ checksum "./modules_package.json" }}
          paths:
            - node_modules
          
      - run:
          name: Link, lint and test everything, then upload coverage reports
          command: |

            echo "Executing all lints, tests"
            /bin/sh execute_test_lint.sh functions/float-api
            /bin/sh execute_test_lint.sh functions/user-activity-api
            /bin/sh execute_test_lint.sh functions/user-existence-api
            /bin/sh execute_test_lint.sh functions/boost-api
            /bin/sh execute_test_lint.sh functions/audience-selection
            /bin/sh execute_test_lint.sh functions/user-messaging-api
            /bin/sh execute_test_lint.sh functions/third-parties
            /bin/sh execute_test_lint.sh functions/db-migration no-test
            /bin/sh execute_test_lint.sh functions/admin-api no-test
            /bin/sh execute_test_lint.sh functions/warmup link-only
            
            echo "Uploading coverage reports"
            cd $HOME/app
            npm install --save-dev codecov
            node_modules/codecov/bin/codecov

      # And here the deployment stuff starts
      - restore_cache:
          keys:
          - terraform_bin-{{ checksum "./terraform/terraform_version" }}

      - restore_cache:
          keys:
          - aws_zip

      - run:
          name: install aws cli
          command: |
            if [ ! -f awscli-bundle.zip ]; then
               wget "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip"
            fi
            unzip awscli-bundle.zip
            ./awscli-bundle/install -b ~/bin/aws

      - save_cache:
          key: aws_zip
          paths:
            - awscli-bundle.zip

      - run:
          name: build artifacts
          command: |
             if [ $CIRCLE_BRANCH == 'master' ] || [ $CIRCLE_BRANCH == 'staging' ]; then
                echo "On branch $CIRCLE_BRANCH, building artifacts."

                echo "First, we do a prune production on the consolidated bundle"
                cd $HOME/app
                npm prune --production

                echo "Then we delete aws-sdk, since provided in lambda runtime, and huge size duplicated"
                find . -name "aws-sdk" -exec rm -r {} +

                echo "Then we copy back in the modules, because they would have been deleted"
                rm modules/README.md
                cp -r modules/* node_modules

                echo "Now ready to zip code bundles and upload them"

                cd $HOME/app/functions/db-migration
                echo $CIRCLE_SHA1 > last_commit.txt
                zip -rq $HOME/deploy_db_migration_$CIRCLE_SHA1.zip .

                cd $HOME/app/functions/float-api
                echo $CIRCLE_SHA1 > last_commit.txt
                zip -rq $HOME/deploy_float_api_$CIRCLE_SHA1.zip .

                cd $HOME/app/functions/user-activity-api
                echo $CIRCLE_SHA1 > last_commit.txt
                zip -rq $HOME/deploy_user_act_$CIRCLE_SHA1.zip .

                cd $HOME/app/functions/user-existence-api
                echo $CIRCLE_SHA1 > last_commit.txt
                zip -rq $HOME/deploy_user_existence_api_$CIRCLE_SHA1.zip .

                cd $HOME/app/functions/boost-api
                echo $CIRCLE_SHA1 > last_commit.txt
                zip -rq $HOME/deploy_boost_api_$CIRCLE_SHA1.zip .

                cd $HOME/app/functions/audience-selection
                echo $CIRCLE_SHA1 > last_commit.txt
                zip -rq $HOME/deploy_audience_selection_$CIRCLE_SHA1.zip .

                cd $HOME/app/functions/user-messaging-api
                echo $CIRCLE_SHA1 > last_commit.txt
                zip -rq $HOME/deploy_user_messaging_api_$CIRCLE_SHA1.zip .

                cd $HOME/app/functions/admin-api
                echo $CIRCLE_SHA1 > last_commit.txt
                zip -rq $HOME/deploy_admin_api_$CIRCLE_SHA1.zip .

                cd $HOME/app/functions/third-parties
                echo $CIRCLE_SHA1 > last_commit.txt
                zip -rq $HOME/deploy_third_parties_$CIRCLE_SHA1.zip .

                cd $HOME/app/functions/warmup
                echo $CIRCLE_SHA1 > last_commit.text
                zip -rq $HOME/deploy_ops_warmup_$CIRCLE_SHA1.zip .

             fi
             
      - run:
          name: deploy artifacts
          command: |

             if [ $CIRCLE_BRANCH == 'master' ] || [ $CIRCLE_BRANCH == 'staging' ]; then
                echo "On branch $CIRCLE_BRANCH, deploying artifacts."

                cd $HOME

                /home/circleci/bin/aws s3 cp deploy_db_migration_$CIRCLE_SHA1.zip s3://pluto.lambda.$CIRCLE_BRANCH/db_migration/$CIRCLE_SHA1.zip
                /home/circleci/bin/aws s3 cp deploy_float_api_$CIRCLE_SHA1.zip s3://pluto.lambda.$CIRCLE_BRANCH/float_api/$CIRCLE_SHA1.zip
                /home/circleci/bin/aws s3 cp deploy_user_act_$CIRCLE_SHA1.zip s3://pluto.lambda.$CIRCLE_BRANCH/user_activity_api/$CIRCLE_SHA1.zip
                /home/circleci/bin/aws s3 cp deploy_user_existence_api_$CIRCLE_SHA1.zip s3://pluto.lambda.$CIRCLE_BRANCH/user_existence_api/$CIRCLE_SHA1.zip
                /home/circleci/bin/aws s3 cp deploy_boost_api_$CIRCLE_SHA1.zip s3://pluto.lambda.$CIRCLE_BRANCH/boost_api/$CIRCLE_SHA1.zip
                /home/circleci/bin/aws s3 cp deploy_audience_selection_$CIRCLE_SHA1.zip s3://pluto.lambda.$CIRCLE_BRANCH/audience_selection/$CIRCLE_SHA1.zip
                /home/circleci/bin/aws s3 cp deploy_user_messaging_api_$CIRCLE_SHA1.zip s3://pluto.lambda.$CIRCLE_BRANCH/user_messaging_api/$CIRCLE_SHA1.zip
                /home/circleci/bin/aws s3 cp deploy_admin_api_$CIRCLE_SHA1.zip s3://pluto.lambda.$CIRCLE_BRANCH/admin_api/$CIRCLE_SHA1.zip
                /home/circleci/bin/aws s3 cp deploy_third_parties_$CIRCLE_SHA1.zip s3://pluto.lambda.$CIRCLE_BRANCH/third_parties/$CIRCLE_SHA1.zip

                /home/circleci/bin/aws s3 cp deploy_ops_warmup_$CIRCLE_SHA1.zip s3://pluto.lambda.$CIRCLE_BRANCH/ops_warmup/$CIRCLE_SHA1.zip

                /home/circleci/bin/aws s3 sync $HOME/app/templates/emails/ s3://$CIRCLE_BRANCH.jupiter.templates/emails/
                /home/circleci/bin/aws s3 sync $HOME/app/templates/payment/ s3://$CIRCLE_BRANCH.jupiter.templates/payment/
             fi

      - run:
          name: handle cloud components
          command: |
             export TF_VERSION=$(cat $HOME/app/terraform/terraform_version)
             cd $HOME/app
             ./audit_iam.sh

             if [ ! -f /tmp/terraform/terraform ]; then
                wget -O /tmp/terraform.zip https://releases.hashicorp.com/terraform/$TF_VERSION/terraform_$(echo "$TF_VERSION")_linux_amd64.zip
                unzip /tmp/terraform.zip -d /tmp/terraform
             fi

             export PATH="/tmp/terraform:$PATH"
             cd $HOME/app/terraform

             if [ $CIRCLE_BRANCH == 'master' ] || [ $CIRCLE_BRANCH == 'staging' ] ; then
                echo "Fetch private credentials used in some lambdas"
                /home/circleci/bin/aws s3 cp s3://jupiter.deploy.files/ops-private-vars.tf .

                terraform init
                terraform workspace select $CIRCLE_BRANCH
                
                # terraform plan -var "deploy_code_commit_hash=$CIRCLE_SHA1" -var "aws_access_key=$AWS_ACCESS_KEY_ID" -var "aws_secret_access_key=$AWS_SECRET_ACCESS_KEY" -var "db_user=$RDS_USERNAME" -var "db_password=$RDS_PASSWORD"
                terraform apply -auto-approve -var "deploy_code_commit_hash=$CIRCLE_SHA1" -var "aws_access_key=$AWS_ACCESS_KEY_ID" -var "aws_secret_access_key=$AWS_SECRET_ACCESS_KEY" -var "db_user=$RDS_USERNAME" -var "db_password=$RDS_PASSWORD"
                
                if [ $CIRCLE_BRANCH == 'master' ]; then
                    migrator_region=eu-west-1
                fi

                if [ $CIRCLE_BRANCH == 'staging' ]; then
                    migrator_region=us-east-1
                fi

                /home/circleci/bin/aws lambda invoke --region $migrator_region --invocation-type RequestResponse --function-name db_migration --payload file://$HOME/app/functions/db-migration/create_roles_event.json  --log-type Tail -
                /home/circleci/bin/aws lambda invoke --region $migrator_region --invocation-type RequestResponse --function-name db_migration --payload '{"type": "SETUP_TABLES"}' --log-type Tail -
             fi

      - save_cache:
          key: terraform_bin-{{ checksum "./terraform/terraform_version" }}
          paths:
            - /tmp/terraform
