# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      - image: circleci/node:chakracore-8.10.0
        environment:

      # Postgres image for testing
      - image: circleci/postgres:9.6.5-alpine-ram
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: postgres

    working_directory: ~/app

    steps:
      - checkout

      - restore_cache:
          keys:
          - float-api_dependencies-{{ checksum "./functions/float-api/package.json" }}
      - restore_cache:
          keys:
          - user-act-api_dependencies-{{ checksum "./functions/user-act-api/package.json" }}
      - restore_cache:
          keys:
          - user-existence-api_dependencies-{{ checksum "./functions/user-existence-api/package.json" }}
      - restore_cache:
          keys:
          - terraform_bin-{{ checksum "./terraform/terraform_version" }}
      - restore_cache:
          keys:
          - aws_zip

      - run:
          name: install node modules
          command: |

            cd $HOME/app/functions/float-api && npm install
            cd $HOME/app/functions/user-act-api && npm install
            cd $HOME/app/functions/user-existence-api && npm install
            cd $HOME/app

      - run:
          name: install aws cli
          command: |
            if [ ! -f awscli-bundle.zip ]; then
               wget "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip"
            fi
            unzip awscli-bundle.zip
            ./awscli-bundle/install -b ~/bin/aws

      - save_cache:
          key: aws_zip
          paths:
            - awscli-bundle.zip

      - save_cache:
          key: float-api_dependencies-{{ checksum "./functions/float-api/package.json" }}
          paths:
            - ./functions/float-api/node_modules

      - save_cache:
          key: user-act-api_dependencies-{{ checksum "./functions/user-act-api/package.json" }}
          paths:
            - ./functions/user-act-api/node_modules

      - save_cache:
          key: user-existence-api_dependencies-{{ checksum "./functions/user-existence-api/package.json" }}
          paths:
            - ./functions/user-existence-api/node_modules

      - run:
          name: run linter
          command: |
            echo "TODO: run linter"

      - run:
          name: run security check
          command: |
            echo 'TODO: run security check, SNYK, Sourceclear or similar...'

      - run:
          name: run tests
          command: |
             echo 'TODO: run tests'

      - run:
          name: build artifacts
          command: |
             if [ $CIRCLE_BRANCH == 'master' ] || [ $CIRCLE_BRANCH == 'staging' ]; then
                echo "On branch $CIRCLE_BRANCH, building artifacts."
                echo $CIRCLE_SHA1 > last_commit.txt
                zip -r deploy_float_api_$CIRCLE_SHA1.zip $HOME/app/functions/float-api
                zip -r deploy_user_act_$CIRCLE_SHA1.zip $HOME/app/functions/user-act-api
                zip -r deploy_user_existence_api_$CIRCLE_SHA1.zip $HOME/app/functions/user-existence-api

             fi
      - run:
          name: deploy artifacts
          command: |

             if [ $CIRCLE_BRANCH == 'master' ] || [ $CIRCLE_BRANCH == 'staging' ]; then
                echo "On branch $CIRCLE_BRANCH, deploying artifacts."

                /home/circleci/bin/aws s3 cp deploy_float_api_$CIRCLE_SHA1.zip s3://pluto.lambda.$CIRCLE_BRANCH/float-api/$CIRCLE_SHA1.zip
                /home/circleci/bin/aws s3 cp deploy_user_act_$CIRCLE_SHA1.zip s3://pluto.lambda.$CIRCLE_BRANCH/user-act-api/$CIRCLE_SHA1.zip
                /home/circleci/bin/aws s3 cp deploy_user_existence_api_$CIRCLE_SHA1.zip s3://pluto.lambda.$CIRCLE_BRANCH/user-existence-api/$CIRCLE_SHA1.zip
             fi

      - run:
          name: handle cloud components
          command: |
             export TF_VERSION=$(cat $HOME/app/terraform/terraform_version)

             if [ ! -f /tmp/terraform/terraform ]; then
                wget -O /tmp/terraform.zip https://releases.hashicorp.com/terraform/$TF_VERSION/terraform_$(echo "$TF_VERSION")_linux_amd64.zip
                unzip /tmp/terraform.zip -d /tmp/terraform
             fi

             export PATH="/tmp/terraform:$PATH"
             cd $HOME/app/terraform
             terraform init
             terraform workspace select $CIRCLE_BRANCH
             #-auto-approve for apply
             terraform plan -var "deploy_code_commit_hash=$CIRCLE_SHA1" -var "aws_access_key=$AWS_ACCESS_KEY_ID" -var "aws_secret_access_key=$AWS_SECRET_ACCESS_KEY" -var "db_user=aaabbbccc" -var "db_password=aaabbbccc"

      - save_cache:
          key: terraform_bin-{{ checksum "./terraform/terraform_version" }}
          paths:
            - /tmp/terraform

      - run:
          name: upload artifacts
          command: |
             if [ $CIRCLE_BRANCH == 'master' ] || [ $CIRCLE_BRANCH == 'staging' ]; then
                echo "On branch $CIRCLE_BRANCH, uploading artifacts."
             fi



