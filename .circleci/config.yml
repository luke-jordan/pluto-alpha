# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      - image: circleci/node:10
        environment:

      # Postgres image for testing
      # - image: circleci/postgres:9.6.5-alpine-ram
      #   environment:
      #     POSTGRES_USER: postgres
      #     POSTGRES_DB: postgres
      #     POSTGRES_PASSWORD: postgres

    working_directory: ~/app

    steps:
      - checkout

      - restore_cache:
          keys:
          - terraform_bin-{{ checksum "./terraform/terraform_version" }}
      - restore_cache:
          keys:
          - aws_zip

      - run:
          name: install node modules
          command: |

            cd $HOME/app/functions/db-migration && npm install
            cd $HOME/app/functions/warmup && npm install
            cd $HOME/app/functions/float-api && npm install
            cd $HOME/app/functions/user-activity-api && npm install
            cd $HOME/app/functions/user-existence-api && npm install
            cd $HOME/app/modules/rds-common && npm install
            cd $HOME/app/modules/dynamo-common && npm install
            cd $HOME/app

            # Warmup lambda does not need these
            cp -r modules/* $HOME/app/functions/db-migration/node_modules
            cp -r modules/* $HOME/app/functions/float-api/node_modules
            cp -r modules/* $HOME/app/functions/user-activity-api/node_modules
            cp -r modules/* $HOME/app/functions/user-existence-api/node_modules

      - run:
          name: install aws cli
          command: |
            if [ ! -f awscli-bundle.zip ]; then
               wget "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip"
            fi
            unzip awscli-bundle.zip
            ./awscli-bundle/install -b ~/bin/aws

      - save_cache:
          key: aws_zip
          paths:
            - awscli-bundle.zip

      - run:
          name: run linter
          command: |
            echo "Linting modules"
            cd $HOME/app/modules/dynamo-common && npm run-script lint
            cd ../rds-common && npm run-script lint

            # We skip warmup because it is so trivial
            echo "Linting functions"
            cd $HOME/app/functions/user-activity-api && npm run-script lint
            cd ../user-existence-api && npm run-script lint
            cd ../float-api && npm run-script lint
            cd ../db-migration && npm run-script lint
            
      # todo: restore this once lodash thing is out of deep deps & node has reliably updated etc
      # - run:
      #     name: run security check
      #     command: |
      #       cd $HOME/app/functions/user-activity-api && npm i --package-lock-only && npm audit
      #       # we do this to avoid the package lock inadvertantly overriding later and wiping modules
      #       rm ./package-lock.json
      #       cd ../user-existence-api && npm i --package-lock-only && npm audit fix --only=prod
      #       rm ./package-lock.json
      #       cd ../float-api && npm i --package-lock-only && npm audit fix --only=prod
      #       rm ./package-lock.json
      #       cd ../db-migration && npm i --package-lock-only && npm audit fix --only=prod
      #       rm ./package-lock.json

      - run:
          name: run tests
          command: |
            cd $HOME/app
            npm install codecov
            
            echo "Running function tests and outputing coverage reports"
            cd $HOME/app/functions/user-existence-api; npm test; npm run-script generate-coverage
            cd ../user-activity-api; npm test; npm run-script generate-coverage
            cd ../float-api; npm test; npm run-script generate-coverage
            
            echo "Runing module tests and outputting coverage reports"
            cd $HOME/app/modules/dynamo-common; npm test; npm run-script generate-coverage
            cd ../rds-common; npm test; npm run-script generate-coverage

            echo "Uploading coverage reports"
            cd $HOME/app
            node_modules/codecov/bin/codecov

      - run:
          name: build artifacts
          command: |
             if [ $CIRCLE_BRANCH == 'master' ] || [ $CIRCLE_BRANCH == 'staging' ]; then
                echo "On branch $CIRCLE_BRANCH, building artifacts."

                echo "Removing AWS SDK as lambda runtimes have built-in and causes massive bloat"
                cd $HOME/app
                sudo find . -name "aws-sdk" -exec rm -r {} +

                cd $HOME/app/functions/db-migration
                echo $CIRCLE_SHA1 > last_commit.txt
                zip -rq $HOME/deploy_db_migration_$CIRCLE_SHA1.zip .

                cd $HOME/app/functions/float-api
                echo $CIRCLE_SHA1 > last_commit.txt
                zip -rq $HOME/deploy_float_api_$CIRCLE_SHA1.zip .

                cd $HOME/app/functions/user-activity-api
                echo $CIRCLE_SHA1 > last_commit.txt
                zip -rq $HOME/deploy_user_act_$CIRCLE_SHA1.zip .

                cd $HOME/app/functions/user-existence-api
                echo $CIRCLE_SHA1 > last_commit.txt
                zip -rq $HOME/deploy_user_existence_api_$CIRCLE_SHA1.zip .

                cd $HOME/app/functions/warmup
                echo $CIRCLE_SHA1 > last_commit.text
                zip -rq $HOME/deploy_ops_warmup_$CIRCLE_SHA1.zip .

             fi
      - run:
          name: deploy artifacts
          command: |

             if [ $CIRCLE_BRANCH == 'master' ] || [ $CIRCLE_BRANCH == 'staging' ]; then
                echo "On branch $CIRCLE_BRANCH, deploying artifacts."

                cd $HOME

                /home/circleci/bin/aws s3 cp deploy_db_migration_$CIRCLE_SHA1.zip s3://pluto.lambda.$CIRCLE_BRANCH/db_migration/$CIRCLE_SHA1.zip
                /home/circleci/bin/aws s3 cp deploy_float_api_$CIRCLE_SHA1.zip s3://pluto.lambda.$CIRCLE_BRANCH/float_api/$CIRCLE_SHA1.zip
                /home/circleci/bin/aws s3 cp deploy_user_act_$CIRCLE_SHA1.zip s3://pluto.lambda.$CIRCLE_BRANCH/user_activity_api/$CIRCLE_SHA1.zip
                /home/circleci/bin/aws s3 cp deploy_user_existence_api_$CIRCLE_SHA1.zip s3://pluto.lambda.$CIRCLE_BRANCH/user_existence_api/$CIRCLE_SHA1.zip

                /home/circleci/bin/aws s3 cp deploy_ops_warmup_$CIRCLE_SHA1.zip s3://pluto.lambda.$CIRCLE_BRANCH/ops_warmup/$CIRCLE_SHA1.zip
             fi

      - run:
          name: handle cloud components
          command: |
             export TF_VERSION=$(cat $HOME/app/terraform/terraform_version)
             cd $HOME/app

             if [ ! -f /tmp/terraform/terraform ]; then
                wget -O /tmp/terraform.zip https://releases.hashicorp.com/terraform/$TF_VERSION/terraform_$(echo "$TF_VERSION")_linux_amd64.zip
                unzip /tmp/terraform.zip -d /tmp/terraform
             fi

             export PATH="/tmp/terraform:$PATH"
             cd $HOME/app/terraform

             if [ $CIRCLE_BRANCH == 'master' ] || [ $CIRCLE_BRANCH == 'staging' ] ; then
                terraform init
                terraform workspace select $CIRCLE_BRANCH
                
                terraform plan -var "deploy_code_commit_hash=$CIRCLE_SHA1" -var "aws_access_key=$AWS_ACCESS_KEY_ID" -var "aws_secret_access_key=$AWS_SECRET_ACCESS_KEY" -var "db_user=$RDS_USERNAME" -var "db_password=$RDS_PASSWORD"
                terraform apply -auto-approve -var "deploy_code_commit_hash=$CIRCLE_SHA1" -var "aws_access_key=$AWS_ACCESS_KEY_ID" -var "aws_secret_access_key=$AWS_SECRET_ACCESS_KEY" -var "db_user=$RDS_USERNAME" -var "db_password=$RDS_PASSWORD"
                
                if [ $CIRCLE_BRANCH == 'master' ]; then
                    migrator_region=eu-west-1
                fi

                if [ $CIRCLE_BRANCH == 'staging' ]; then
                    migrator_region=us-east-1
                fi


                /home/circleci/bin/aws lambda invoke --region $migrator_region --invocation-type RequestResponse --function-name db_migration --payload file://$HOME/app/functions/db-migration/create_roles_event.json  --log-type Tail -
                /home/circleci/bin/aws lambda invoke --region $migrator_region --invocation-type RequestResponse --function-name db_migration --payload '{"type": "SETUP_TABLES"}' --log-type Tail -
             fi

      - save_cache:
          key: terraform_bin-{{ checksum "./terraform/terraform_version" }}
          paths:
            - /tmp/terraform



