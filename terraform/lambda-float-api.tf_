variable "lambda_function_name" {
  default = "float-api"
  type = "string"
}
variable "lambda_function_iam_role_name" {
  default = "float-api-iam-role"
  type = "string"
}

resource "aws_api_gateway_rest_api" "float-api" {
  name        = "${var.lambda_function_name}-${terraform.workspace}-rest-api"
}

resource "aws_api_gateway_resource" "proxy" {
  rest_api_id = "${aws_api_gateway_rest_api.float-api.id}"
  parent_id   = "${aws_api_gateway_rest_api.float-api.root_resource_id}"
  path_part   = "{proxy+}"
}

resource "aws_api_gateway_method" "proxy" {
  rest_api_id   = "${aws_api_gateway_rest_api.float-api.id}"
  resource_id   = "${aws_api_gateway_resource.proxy.id}"
  http_method   = "ANY"
  authorization = "NONE"
}

resource "aws_api_gateway_integration" "lambda" {
  rest_api_id = "${aws_api_gateway_rest_api.float-api.id}"
  resource_id = "${aws_api_gateway_method.proxy.resource_id}"
  http_method = "${aws_api_gateway_method.proxy.http_method}"

  integration_http_method = "POST"
  type                    = "AWS_PROXY"
  uri                     = "${aws_lambda_function.float-api.invoke_arn}"
}

resource "aws_api_gateway_deployment" "float-api" {
  rest_api_id = "${aws_api_gateway_rest_api.float-api.id}"
  stage_name  = "${terraform.workspace}-stage"
}

resource "aws_lambda_permission" "allow_lambda_invocation" {
  action        = "lambda:InvokeFunction"
  function_name = "${var.lambda_function_name}"
  principal     = "apigateway.amazonaws.com"
  source_arn    = "${aws_api_gateway_deployment.float-api.execution_arn}/*/*"
}

resource "aws_lambda_function" "float-api" {

  function_name                  = "${var.lambda_function_name}"
  role                           = "${var.lambda_function_iam_role_name}"
  handler                        = "main.handler"
  memory_size                    = 256
  reserved_concurrent_executions = 20
  runtime                        = "nodejs8.10"
  timeout                        = 900
  tags                           = {"environment"  = "${terraform.workspace}"}
  

  environment {
    variables = {
      config = "${var.lambda-pluto-api-env}"
    }
  }
  vpc_config {
    subnet_ids = [for subnet in aws_subnet.private : subnet.id]
    security_group_ids = [aws_security_group.float-api.id]
  }

  s3_bucket = "pluto.lambda.${terraform.workspace}"
  s3_key = "latest.zip"
}

resource "aws_security_group" "float-api" {
  name = "${terraform.workspace}-float-api"

  vpc_id = "${aws_vpc.main.id}"

  // allows traffic from the SG itself
  ingress {
      from_port = 0
      to_port = 0
      protocol = "-1"
      self = true
  }

  //allow traffic for TCP 5432
  ingress {
      from_port = 8080
      to_port   = 8080
      protocol  = "tcp"
  }
}


module "basic_execution_policy_role" {
  source = "./modules/iam/lambda_basic_role"
  aws_iam_role_name = "${var.lambda_function_iam_role_name}"
}

module "basic_execution_policy_attachement" {
  source = "./modules/iam/lambda_basic_policy"
  aws_iam_role_name = "${var.lambda_function_iam_role_name}"
}

module "lambda_vpc_execution_policy_attachement" {
  source = "./modules/iam/lambda_vpc_policy"
  aws_iam_role_name = "${var.lambda_function_iam_role_name}"
}

module "float-api-alarm-fatal-errors" {
  source = "./modules/cloud_watch_alarm"
  
  metric_namespace = "lambda_errors"
  alarm_name = "float-api-alarm"
  log_group_name = "/aws/lambda/${var.lambda_function_name}"
  pattern = "FATAL_ERROR"
  alarm_action_arn = "${aws_sns_topic.fatal_errors_topic.arn}"
  statistic = "Sum"
}

module "float-api-alarm-security-errors" {
  source = "./modules/cloud_watch_alarm"
  
  metric_namespace = "lambda_errors"
  alarm_name = "float-api-alarm"
  log_group_name = "/aws/lambda/${var.lambda_function_name}"
  pattern = "SECURITY_ERROR"
  alarm_action_arn = "${aws_sns_topic.security_errors_topic.arn}"
  statistic = "Sum"
}

